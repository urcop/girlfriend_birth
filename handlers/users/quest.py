from asyncio import sleep

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from data.check_right_answer import check, answers
from data.config import PLACE1_ANSWER, PLACE2_ANSWER, PLACE3_ANSWER, PLACE4_ANSWER, PLACE5_ANSWER
from data.start_quest import check_available
from keyboards.inline.quest import quest_start_keyboard
from loader import dp
from states.quest import Quest


@dp.message_handler(Command(['quest']))
async def quest(message: types.Message):
    if not check_available():
        await message.answer('–ü–æ–∫–∞ —Ä–∞–Ω–æ, –∫–≤–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å 13:00 (—á—Ç–æ–±—ã —Ç—ã –Ω–µ —Ç—ã–∫–∞–ª–∞ –≤—Å–µ –ø–æ–¥—Ä—è–¥ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏) ')
    else:
        await message.answer('—Å–∞–π—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ—Ä–¥–∞–º - https://geotree.ru/coordinates',
                             disable_web_page_preview=True)
        await message.answer(
            text='–ö–≤–µ—Å—Ç –Ω–∞—á–∞–ª—Å—è, —Å—É—Ç—å –∫–≤–µ—Å—Ç–∞:\n\n'
                 '\t\t1. –¢—ã –¥–æ–ª–∂–Ω–∞ –±—É–¥–µ—à—å –∏—Å–∫–∞—Ç—å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ª–∏—Å—Ç–æ—á–∫–∏ –∏ –Ω–∞ –Ω–∏—Ö –Ω–∞–ø–∏—Å–∞–Ω–æ '
                 '—á—Ç–æ –ø–∏—Å–∞—Ç—å –≤ –±–æ—Ç–∞ —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ\n'
                 '\t\t2. –° —Ç–æ–±–æ–π –±—É–¥—É —Ö–æ–¥–∏—Ç—å —è (–ø–æ—Ç–æ–º—É —á—Ç–æ —è –∑–Ω–∞—é —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–µ '
                 '–Ω–∞–π—Ç–∏ –∏–ª–∏ –Ω–µ —É–≤–∏–¥–µ—Ç—å)\n'
                 '\t\t3. –ñ—É–ª—å–Ω–∏—á–∞—Ç—å, –∏—Å–∫–∞—Ç—å –æ–±—Ö–æ–¥–Ω—ã–µ –∫–∞–∫–∏–µ –ª–∏–±–æ –ø—É—Ç–∏, –ø–æ–¥–∫—É–ø–∞—Ç—å –º–µ–Ω—è - –Ω–µ–ª—å–∑—è\n',
            reply_markup=quest_start_keyboard,
            disable_web_page_preview=True)


@dp.callback_query_handler(text='start_quest')
async def start_quest(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer('–ü–µ—Ä–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - <code>43.399899, 39.979807</code>')
    await sleep(3)
    await call.message.answer('–í–≤–æ–¥–∏ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—à–ª–∞')
    await Quest.place1.set()


@dp.message_handler(state=Quest.place1)
async def place1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['place1'] = message.text
        if check(data['place1'], PLACE1_ANSWER):
            await message.answer(text=answers('good'))
            await message.answer('–ù–µ–∫—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - <code>43.400923, 39.980339</code>')
            await sleep(3)
            await message.answer('–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ')
            await Quest.next()
        else:
            await message.answer(text=answers('wrong'))
            await Quest.place1.set()


@dp.message_handler(state=Quest.place2)
async def place2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['place2'] = message.text
        if check(data['place2'], PLACE2_ANSWER):
            await message.answer(text=answers('good'))
            await message.answer('–°—é–¥–∞ - <code>43.401728, 39.979220</code>')
            await sleep(3)
            await message.answer('—á–µ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–æ?')
            await Quest.next()
        else:
            await message.answer(text=answers('wrong'))
            await Quest.place2.set()


@dp.message_handler(state=Quest.place3)
async def place3(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['place3'] = message.text
        if check(data['place3'], PLACE3_ANSWER):
            await message.answer(text=answers('good'))
            await message.answer('–©–∞—Å —Å—é–¥–∞ - <code>43.401598, 39.981340</code>')
            await sleep(3)
            await message.answer('—á—Ç–æ –Ω–µ–∫—Å—Ç?')
            await Quest.next()
        else:
            await message.answer(text=answers('wrong'))
            await Quest.place3.set()


@dp.message_handler(state=Quest.place4)
async def place4(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['place4'] = message.text
        if check(data['place4'], PLACE4_ANSWER):
            await message.answer(text=answers('good'))
            await message.answer('–≤–æ—Ç —Å—é–¥–∞ —Ç–µ–ø–µ—Ä—å - <code>43.401372, 39.980916</code>')
            await sleep(15)
            await message.answer('–¥—É–º–∞—é –¥–æ–≥–∞–¥–∞–ª–∞—Å—å —á—Ç–æ –º–Ω–µ –æ—Ç —Ç–µ–±—è –Ω–∞–¥–æ')
            await Quest.next()
        else:
            await message.answer(text=answers('wrong'))
            await Quest.place4.set()


@dp.message_handler(state=Quest.place5)
async def place4(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['place5'] = message.text
        if check(data['place5'], PLACE5_ANSWER):
            await message.answer('–¢—ã –ø—Ä–æ—à–ª–∞ –∫–≤–µ—Å—Ç, –ø—Ä–æ –ø–æ–¥–∞—Ä–æ–∫ —Å–ø—Ä–∞—à–∏–≤–∞–π —É –∫–µ—Ä–∏–ª–∞ —è –Ω–∏—Ö—É—è –Ω–µ –∑–Ω–∞—éü§™ü§™ü§™ü§™')
            await state.finish()
        else:
            await message.answer(text=answers('wrong'))
            await Quest.place5.set()
